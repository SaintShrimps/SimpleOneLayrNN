#Модуль с функцией получения нейросетевой модели БФ
#Используя пороговую или логистическую ФА


from DataIO import write_Data
from Graphic import drawGraph
from formulas import *


#W: начальные весовые коэффициенты
#F: знаечния БФ
#X: вектор с значениями от 0 до 16 в двоичном представлении
#outputFile: имя файла выхода
#kind: вид ФА: threshold - пороговая, logistics - логистическая
def kind_FA(W, F, X, outputFile, kind):
    nu = 0.3 #Норма обучения
    E = 1 #Колличество ошибок
    k = 0 #Эпоха

    arrayE = list() #Cписок всех суммарнах квадратичных ошибок
    arrayK = list() #Cписок всех эпох
    Y = list() #Bектор для хранения полученного реального выхода текущей эпохи

    file = open(outputFile, 'w') #Открытие файла для записи выходных данных

    #Обучение до тех пор, пока квадратичная ошибка не будет = 0
    while E != 0:
        #Записываем последние полученные весовые коэффициенты на случай получения нулевой ошибки
        prev_W = list(W)

        #Проверка на достижение нулевой ошибки на последних найденных весовых коэффициентах
        for (x, f) in zip(X, F):
            # 1)Подесчет net
            n = net(W, x)

            # 2)Реальный выход
            y = actual_NN(n)
            Y.append(y)

            # 3)Ошибку дельта
            d = delta(f, y)

        # 5)Подсчет сумарной квадратичной ошибки
        E = totalError(Y, F)

        #Запись полученных данные в файл
        write_Data(file, k, Y, prev_W, E)

        Y = list() #Очистка вектора от полученных данных

        # Если ошибка(Е) != 0 выполняется перерасчёт весовых коэффициентов
        if E != 0:

            for (x,f) in zip(X, F):
                n = net(W, x)
                y = actual_NN(n)
                d = delta(f, y)

                #Пересчеи W(Синаптические вес)
                W = recount_W(W, x, d, n, nu, kind)

        #Добавление номера текущей эпохи и найденную в ней среднеквадратичную ошибку
        arrayK.append(k)
        arrayE.append(E)
                
        k += 1#Увеличивание количество эпох +1

    #Построение графика зависимости среднеквадратичной ошибки от эпохи
    drawGraph(arrayE, arrayK, kind, outputFile)
